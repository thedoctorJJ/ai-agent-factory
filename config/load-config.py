#!/usr/bin/env python3
"""
Robust Configuration Loader for AI Agent Factory
This script loads configuration from multiple sources and creates a working .env file
"""

import os
import sys
from pathlib import Path

def load_config():
    """Load configuration from multiple sources and create a working .env file"""
    
    # Base configuration directory
    config_dir = Path(__file__).parent
    project_root = config_dir.parent
    
    # Configuration sources (in order of priority)
    config_sources = [
        config_dir / "env" / ".env.local",           # Main config file
        config_dir / "env" / ".env.backup",          # Backup config
        config_dir / "google-cloud-updated.env",     # Google Cloud updates
        config_dir / "env.example",                  # Template
    ]
    
    # Load configuration
    config = {}
    
    for source in config_sources:
        if source.exists():
            print(f"ðŸ“„ Loading config from: {source}")
            with open(source, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        config[key.strip()] = value.strip()
    
    # Apply Google Cloud updates
    google_cloud_updates = {
        'GOOGLE_CLOUD_PROJECT_ID': 'agent-factory-474201',
        'GOOGLE_CLOUD_REGION': 'us-central1',
        'GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY': 'config/google-cloud-service-account.json',
        'REDIS_HOST': '10.1.93.195',
        'REDIS_PORT': '6379',
        'REDIS_URL': 'redis://10.1.93.195:6379',
        'CLOUD_RUN_REGION': 'us-central1',
        'CLOUD_RUN_PROJECT_ID': 'agent-factory-474201',
        'CLOUD_RUN_SERVICE_URL': 'https://test-agent-service-952475323593.us-central1.run.app',
        'GCR_REGISTRY': 'gcr.io/agent-factory-474201',
        'DEPLOYMENT_PLATFORM': 'google-cloud-run',
        'DEPLOYMENT_REGION': 'us-central1',
        'DEPLOYMENT_PROJECT': 'agent-factory-474201'
    }
    
    # Update with Google Cloud settings
    config.update(google_cloud_updates)
    
    # Create working .env file in project root
    env_file = project_root / ".env"
    with open(env_file, 'w') as f:
        f.write("# AI Agent Factory Configuration\n")
        f.write("# Generated by load-config.py\n\n")
        
        # Write configuration sections
        sections = {
            'Database Configuration': ['DATABASE_URL'],
            'Supabase Configuration': ['SUPABASE_URL', 'SUPABASE_KEY', 'SUPABASE_SERVICE_ROLE_KEY'],
            'Google Cloud Configuration': ['GOOGLE_CLOUD_PROJECT_ID', 'GOOGLE_CLOUD_REGION', 'GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY'],
            'Redis Configuration': ['REDIS_HOST', 'REDIS_PORT', 'REDIS_URL'],
            'Cloud Run Configuration': ['CLOUD_RUN_REGION', 'CLOUD_RUN_PROJECT_ID', 'CLOUD_RUN_SERVICE_URL'],
            'Container Registry': ['GCR_REGISTRY'],
            'Deployment Configuration': ['DEPLOYMENT_PLATFORM', 'DEPLOYMENT_REGION', 'DEPLOYMENT_PROJECT'],
            'GitHub Configuration': ['GITHUB_APP_ID', 'GITHUB_PRIVATE_KEY', 'GITHUB_WEBHOOK_SECRET', 'GITHUB_ORG_NAME', 'GITHUB_TOKEN'],
            'OpenAI Configuration': ['OPENAI_API_KEY'],
            'Devin AI Configuration': ['DEVIN_AI_API_KEY', 'DEVIN_AI_BASE_URL', 'DEVIN_AI_MODEL', 'DEVIN_AI_TIMEOUT'],
            'Application Configuration': ['ENVIRONMENT', 'DEBUG', 'LOG_LEVEL'],
            'Frontend Configuration': ['NEXT_PUBLIC_API_URL', 'NEXT_PUBLIC_SUPABASE_URL', 'NEXT_PUBLIC_SUPABASE_ANON_KEY'],
            'Security': ['JWT_SECRET_KEY', 'ENCRYPTION_KEY'],
            'Monitoring': ['SENTRY_DSN', 'SLACK_WEBHOOK_URL']
        }
        
        for section_name, keys in sections.items():
            f.write(f"\n# {section_name}\n")
            for key in keys:
                if key in config:
                    f.write(f"{key}={config[key]}\n")
    
    print(f"âœ… Configuration loaded and written to: {env_file}")
    print(f"ðŸ“Š Loaded {len(config)} configuration variables")
    
    return config

def set_environment_variables(config):
    """Set environment variables from configuration"""
    for key, value in config.items():
        os.environ[key] = value

if __name__ == "__main__":
    config = load_config()
    set_environment_variables(config)
    print("ðŸš€ Configuration loaded successfully!")
