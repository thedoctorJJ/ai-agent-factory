#!/usr/bin/env python3
"""
Secure API Key Manager for AI Agent Factory
This script provides secure, centralized management of all API keys and secrets
"""

import os
import sys
import json
import base64
import getpass
from pathlib import Path
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

class SecureAPIManager:
    def __init__(self, config_dir=None):
        self.config_dir = Path(config_dir) if config_dir else Path(__file__).parent
        self.secrets_file = self.config_dir / "api-secrets.enc"
        self.key_file = self.config_dir / ".master-key"
        self.config_file = self.config_dir / "api-config.json"
        
        # Ensure config directory exists and has proper permissions
        self.config_dir.mkdir(exist_ok=True)
        
    def _get_master_key(self, password=None):
        """Generate or retrieve master encryption key"""
        if self.key_file.exists():
            with open(self.key_file, 'rb') as f:
                return f.read()
        
        # Generate new key
        if password:
            # Use password-based key derivation
            password_bytes = password.encode()
            salt = os.urandom(16)
            kdf = PBKDF2HMAC(
                algorithm=hashes.SHA256(),
                length=32,
                salt=salt,
                iterations=100000,
            )
            key = base64.urlsafe_b64encode(kdf.derive(password_bytes))
        else:
            # Generate random key
            key = Fernet.generate_key()
        
        # Save key with restrictive permissions
        with open(self.key_file, 'wb') as f:
            f.write(key)
        os.chmod(self.key_file, 0o600)
        
        return key
    
    def _encrypt_data(self, data, password=None):
        """Encrypt data using master key"""
        key = self._get_master_key(password)
        fernet = Fernet(key)
        
        if isinstance(data, dict):
            data = json.dumps(data)
        
        return fernet.encrypt(data.encode())
    
    def _decrypt_data(self, encrypted_data, password=None):
        """Decrypt data using master key"""
        key = self._get_master_key(password)
        fernet = Fernet(key)
        
        try:
            decrypted = fernet.decrypt(encrypted_data)
            return json.loads(decrypted.decode())
        except Exception as e:
            raise Exception(f"Failed to decrypt data: {e}")
    
    def store_api_keys(self, api_keys, password=None):
        """Store API keys securely"""
        # Encrypt the API keys
        encrypted_data = self._encrypt_data(api_keys, password)
        
        # Save encrypted file
        with open(self.secrets_file, 'wb') as f:
            f.write(encrypted_data)
        
        # Set restrictive permissions
        os.chmod(self.secrets_file, 0o600)
        
        print(f"‚úÖ API keys encrypted and stored securely in: {self.secrets_file}")
        return True
    
    def load_api_keys(self, password=None):
        """Load API keys securely"""
        if not self.secrets_file.exists():
            return {}
        
        with open(self.secrets_file, 'rb') as f:
            encrypted_data = f.read()
        
        return self._decrypt_data(encrypted_data, password)
    
    def create_working_env(self, password=None):
        """Create a working .env file with all configuration"""
        # Load API keys
        api_keys = self.load_api_keys(password)
        
        # Load base configuration
        base_config = self._get_base_configuration()
        
        # Merge configurations
        full_config = {**base_config, **api_keys}
        
        # Create .env file
        env_file = self.config_dir.parent / ".env"
        with open(env_file, 'w') as f:
            f.write("# AI Agent Factory Configuration\n")
            f.write("# Generated by secure-api-manager.py\n")
            f.write("# DO NOT COMMIT THIS FILE TO GIT\n\n")
            
            # Write configuration in organized sections
            sections = {
                'Database Configuration': ['DATABASE_URL'],
                'Supabase Configuration': ['SUPABASE_URL', 'SUPABASE_KEY', 'SUPABASE_SERVICE_ROLE_KEY'],
                'Google Cloud Configuration': ['GOOGLE_CLOUD_PROJECT_ID', 'GOOGLE_CLOUD_REGION', 'GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY'],
                'Redis Configuration': ['REDIS_HOST', 'REDIS_PORT', 'REDIS_URL'],
                'Cloud Run Configuration': ['CLOUD_RUN_REGION', 'CLOUD_RUN_PROJECT_ID', 'CLOUD_RUN_SERVICE_URL'],
                'Container Registry': ['GCR_REGISTRY'],
                'Deployment Configuration': ['DEPLOYMENT_PLATFORM', 'DEPLOYMENT_REGION', 'DEPLOYMENT_PROJECT'],
                'GitHub Configuration': ['GITHUB_APP_ID', 'GITHUB_PRIVATE_KEY', 'GITHUB_WEBHOOK_SECRET', 'GITHUB_ORG_NAME', 'GITHUB_TOKEN'],
                'OpenAI Configuration': ['OPENAI_API_KEY'],
                'Devin AI Configuration': ['DEVIN_AI_API_KEY', 'DEVIN_AI_BASE_URL', 'DEVIN_AI_MODEL', 'DEVIN_AI_TIMEOUT'],
                'Application Configuration': ['ENVIRONMENT', 'DEBUG', 'LOG_LEVEL'],
                'Frontend Configuration': ['NEXT_PUBLIC_API_URL', 'NEXT_PUBLIC_SUPABASE_URL', 'NEXT_PUBLIC_SUPABASE_ANON_KEY'],
                'Security': ['JWT_SECRET_KEY', 'ENCRYPTION_KEY'],
                'Monitoring': ['SENTRY_DSN', 'SLACK_WEBHOOK_URL']
            }
            
            for section_name, keys in sections.items():
                f.write(f"\n# {section_name}\n")
                for key in keys:
                    if key in full_config:
                        f.write(f"{key}={full_config[key]}\n")
        
        print(f"‚úÖ Working .env file created: {env_file}")
        return full_config
    
    def _get_base_configuration(self):
        """Get non-sensitive base configuration"""
        return {
            # Google Cloud (non-sensitive)
            'GOOGLE_CLOUD_PROJECT_ID': 'agent-factory-474201',
            'GOOGLE_CLOUD_REGION': 'us-central1',
            'GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY': 'config/google-cloud-service-account.json',
            'REDIS_HOST': '10.1.93.195',
            'REDIS_PORT': '6379',
            'REDIS_URL': 'redis://10.1.93.195:6379',
            'CLOUD_RUN_REGION': 'us-central1',
            'CLOUD_RUN_PROJECT_ID': 'agent-factory-474201',
            'CLOUD_RUN_SERVICE_URL': 'https://test-agent-service-952475323593.us-central1.run.app',
            'GCR_REGISTRY': 'gcr.io/agent-factory-474201',
            'DEPLOYMENT_PLATFORM': 'google-cloud-run',
            'DEPLOYMENT_REGION': 'us-central1',
            'DEPLOYMENT_PROJECT': 'agent-factory-474201',
            
            # Application settings
            'ENVIRONMENT': 'development',
            'DEBUG': 'true',
            'LOG_LEVEL': 'INFO',
        }
    
    def import_from_existing(self, source_file, password=None):
        """Import API keys from existing configuration file"""
        if not Path(source_file).exists():
            print(f"‚ùå Source file not found: {source_file}")
            return False
        
        api_keys = {}
        with open(source_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip()
                    
                    # Only import sensitive keys
                    if any(sensitive in key.upper() for sensitive in ['KEY', 'TOKEN', 'SECRET', 'PASSWORD', 'URL', 'ORG', 'ID']):
                        api_keys[key] = value
        
        if api_keys:
            self.store_api_keys(api_keys, password)
            print(f"‚úÖ Imported {len(api_keys)} API keys from {source_file}")
            return True
        else:
            print("‚ùå No API keys found to import")
            return False
    
    def list_stored_keys(self, password=None):
        """List stored API keys (without showing values)"""
        api_keys = self.load_api_keys(password)
        
        if not api_keys:
            print("No API keys stored")
            return
        
        print("üìã Stored API Keys:")
        for key in sorted(api_keys.keys()):
            value = api_keys[key]
            if len(value) > 20:
                masked_value = value[:8] + "..." + value[-8:]
            else:
                masked_value = "***"
            print(f"  {key}: {masked_value}")
    
    def validate_keys(self, password=None):
        """Validate stored API keys"""
        api_keys = self.load_api_keys(password)
        
        if not api_keys:
            print("‚ùå No API keys stored")
            return False
        
        print("üîç Validating API Keys...")
        
        # Set environment variables for validation
        for key, value in api_keys.items():
            os.environ[key] = value
        
        # Import validation functions
        try:
            from validate_config_robust import RobustConfigValidator
            validator = RobustConfigValidator()
            
            # Run validations
            validator.validate_google_cloud_config()
            validator.validate_supabase_connection()
            validator.validate_openai_api()
            validator.validate_github_config()
            validator.validate_deployment_config()
            
            print(f"\nüìä Validation Summary:")
            print(f"‚úÖ Successful validations: {validator.success_count}")
            print(f"‚ö†Ô∏è  Warnings: {len(validator.warnings)}")
            print(f"‚ùå Errors: {len(validator.errors)}")
            
            return len(validator.errors) == 0
            
        except ImportError:
            print("‚ö†Ô∏è  Validation script not available")
            return True

def main():
    """Main function for secure API key management"""
    manager = SecureAPIManager()
    
    if len(sys.argv) < 2:
        print("üîê AI Agent Factory - Secure API Key Manager")
        print("=" * 50)
        print("Usage:")
        print("  python3 secure-api-manager.py import <file> [password]  - Import keys from file")
        print("  python3 secure-api-manager.py create [password]         - Create working .env")
        print("  python3 secure-api-manager.py list [password]           - List stored keys")
        print("  python3 secure-api-manager.py validate [password]       - Validate keys")
        print("  python3 secure-api-manager.py setup [password]          - Complete setup")
        print("")
        print("Examples:")
        print("  python3 secure-api-manager.py import config/env/.env.local")
        print("  python3 secure-api-manager.py create")
        print("  python3 secure-api-manager.py setup")
        return
    
    command = sys.argv[1]
    password = sys.argv[2] if len(sys.argv) > 2 else None
    
    if command == "import":
        if len(sys.argv) < 3:
            print("‚ùå Please specify source file")
            return
        source_file = sys.argv[2]
        manager.import_from_existing(source_file, password)
        
    elif command == "create":
        manager.create_working_env(password)
        
    elif command == "list":
        manager.list_stored_keys(password)
        
    elif command == "validate":
        manager.validate_keys(password)
        
    elif command == "setup":
        print("üöÄ Setting up secure API key management...")
        
        # Import from existing file
        env_file = manager.config_dir / "env" / ".env.local"
        if env_file.exists():
            print(f"üì• Importing from existing configuration: {env_file}")
            manager.import_from_existing(str(env_file), password)
        else:
            print("‚ùå No existing configuration found. Please create config/env/.env.local first.")
            return
        
        # Create working .env
        print("üìù Creating working .env file...")
        manager.create_working_env(password)
        
        # Validate
        print("üîç Validating configuration...")
        manager.validate_keys(password)
        
        print("\n‚úÖ Secure API key management setup complete!")
        print("üîê Your API keys are now stored securely and encrypted.")
        
    else:
        print("‚ùå Unknown command. Use 'import', 'create', 'list', 'validate', or 'setup'")

if __name__ == "__main__":
    main()
